// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: greMf1VEQkt4MFPhQZJ1ua
// Component: yRFP5-EEfg
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import CardWall from "../../CardWall"; // plasmic-import: WfeXSi13l0/component
import IconRow from "../../IconRow"; // plasmic-import: ODN3YJ6SGk/component
import { IndexInput } from "../../../components/proprietary/IndexInput"; // plasmic-import: ZdBlEIWyCZ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apa_nova_app.module.css"; // plasmic-import: greMf1VEQkt4MFPhQZJ1ua/projectcss
import sty from "./PlasmicConsumptionIndexCard.module.css"; // plasmic-import: yRFP5-EEfg/css

import MetersvgIcon from "./icons/PlasmicIcon__Metersvg"; // plasmic-import: R1BUPGBLI/icon

export type PlasmicConsumptionIndexCard__VariantMembers = {};

export type PlasmicConsumptionIndexCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicConsumptionIndexCard__VariantsArgs;
export const PlasmicConsumptionIndexCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConsumptionIndexCard__ArgsType = {
  consumptionPlace?: React.ReactNode;
  consumptionIndex?: React.ReactNode;
};

type ArgPropType = keyof PlasmicConsumptionIndexCard__ArgsType;
export const PlasmicConsumptionIndexCard__ArgProps = new Array<ArgPropType>(
  "consumptionPlace",
  "consumptionIndex"
);

export type PlasmicConsumptionIndexCard__OverridesType = {
  root?: p.Flex<typeof CardWall>;
  freeBox?: p.Flex<"div">;
  iconRow?: p.Flex<typeof IconRow>;
  iconEntry?: p.Flex<"svg">;
  indexInput?: p.Flex<typeof IndexInput>;
};

export interface DefaultConsumptionIndexCardProps {
  consumptionPlace?: React.ReactNode;
  consumptionIndex?: React.ReactNode;
  className?: string;
}

function PlasmicConsumptionIndexCard__RenderFunc(props: {
  variants: PlasmicConsumptionIndexCard__VariantsArgs;
  args: PlasmicConsumptionIndexCard__ArgsType;
  overrides: PlasmicConsumptionIndexCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <CardWall
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      cardContent={
        <IndexInput
          data-plasmic-name={"indexInput"}
          data-plasmic-override={overrides.indexInput}
          className={classNames("__wab_instance", sty.indexInput)}
        />
      }
      cardCta={null}
      cardTitle={
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "wc",
            value: args.consumptionPlace,
            className: classNames(sty.slotTargetConsumptionPlace),
          })}

          <IconRow
            data-plasmic-name={"iconRow"}
            data-plasmic-override={overrides.iconRow}
            className={classNames("__wab_instance", sty.iconRow)}
            iconEntry={
              <MetersvgIcon
                data-plasmic-name={"iconEntry"}
                data-plasmic-override={overrides.iconEntry}
                className={classNames(projectcss.all, sty.iconEntry)}
                role={"img"}
              />
            }
            staticText={"ultimul index:"}
            visualVariations={["defaultColor"]}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vZqZ0
                  )}
                >
                  {"01193"}
                </div>
              ),

              value: args.consumptionIndex,
            })}
          </IconRow>
        </div>
      }
      cardType={"noCta" as const}
      className={classNames("__wab_instance", sty.root)}
      contentCentered={true}
      shrinkedContents={true}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "iconRow", "iconEntry", "indexInput"],
  freeBox: ["freeBox", "iconRow", "iconEntry"],
  iconRow: ["iconRow", "iconEntry"],
  iconEntry: ["iconEntry"],
  indexInput: ["indexInput"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof CardWall;
  freeBox: "div";
  iconRow: typeof IconRow;
  iconEntry: "svg";
  indexInput: typeof IndexInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsumptionIndexCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsumptionIndexCard__VariantsArgs;
    args?: PlasmicConsumptionIndexCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsumptionIndexCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConsumptionIndexCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicConsumptionIndexCard__ArgProps,
      internalVariantPropNames: PlasmicConsumptionIndexCard__VariantProps,
    });

    return PlasmicConsumptionIndexCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConsumptionIndexCard";
  } else {
    func.displayName = `PlasmicConsumptionIndexCard.${nodeName}`;
  }
  return func;
}

export const PlasmicConsumptionIndexCard = Object.assign(
  // Top-level PlasmicConsumptionIndexCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    iconRow: makeNodeComponent("iconRow"),
    iconEntry: makeNodeComponent("iconEntry"),
    indexInput: makeNodeComponent("indexInput"),

    // Metadata about props expected for PlasmicConsumptionIndexCard
    internalVariantProps: PlasmicConsumptionIndexCard__VariantProps,
    internalArgProps: PlasmicConsumptionIndexCard__ArgProps,
  }
);

export default PlasmicConsumptionIndexCard;
/* prettier-ignore-end */
