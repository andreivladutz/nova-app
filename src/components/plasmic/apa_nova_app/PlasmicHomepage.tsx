// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: greMf1VEQkt4MFPhQZJ1ua
// Component: VXVX0M5zp1Df
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Page from "../../Page"; // plasmic-import: ObT6vFZq55k/component
import Title from "../../Title"; // plasmic-import: HmqbxqWFFW/component
import CardWall from "../../CardWall"; // plasmic-import: WfeXSi13l0/component
import IconRow from "../../IconRow"; // plasmic-import: ODN3YJ6SGk/component
import SecondaryButton from "../../SecondaryButton"; // plasmic-import: O5dT0tkpxdk/component
import Button from "../../Button"; // plasmic-import: JGQhBxRoWTE/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_apa_nova_app.module.css"; // plasmic-import: greMf1VEQkt4MFPhQZJ1ua/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: VXVX0M5zp1Df/css

import DropletsvgIcon from "./icons/PlasmicIcon__Dropletsvg"; // plasmic-import: WQp4tVEOm/icon
import DatesvgIcon from "./icons/PlasmicIcon__Datesvg"; // plasmic-import: ecCv7ecZt/icon
import BalanceIcon from "./icons/PlasmicIcon__Balance"; // plasmic-import: HbrrSJ-QT/icon
import AbacusIcon from "./icons/PlasmicIcon__Abacus"; // plasmic-import: 6JTeMSQo_/icon
import CashsvgIcon from "./icons/PlasmicIcon__Cashsvg"; // plasmic-import: y9CJLHvYa/icon
import MetersvgIcon from "./icons/PlasmicIcon__Metersvg"; // plasmic-import: R1BUPGBLI/icon
import CalendarChecksvgIcon from "./icons/PlasmicIcon__CalendarChecksvg"; // plasmic-import: _S25c9xo2/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Bt309EfSp_c/icon
import DownloadsvgIcon from "./icons/PlasmicIcon__Downloadsvg"; // plasmic-import: GNssASFgbV/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: EHycK_nnkfH/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  emittedDate?: React.ReactNode;
  totalPayment?: React.ReactNode;
  waterConsumption?: React.ReactNode;
  dueDate?: React.ReactNode;
  errorMessage?: React.ReactNode;
  existingBalance?: React.ReactNode;
  totalBill?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "emittedDate",
  "totalPayment",
  "waterConsumption",
  "dueDate",
  "errorMessage",
  "existingBalance",
  "totalBill"
);

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  page?: p.Flex<typeof Page>;
  title?: p.Flex<typeof Title>;
  cardWall?: p.Flex<typeof CardWall>;
  issueDateRow?: p.Flex<typeof IconRow>;
  calendarIcon?: p.Flex<"svg">;
  totalBillRow?: p.Flex<typeof IconRow>;
  cashIcon3?: p.Flex<"svg">;
  balanceRow?: p.Flex<typeof IconRow>;
  cashIcon4?: p.Flex<"svg">;
  paymentRow?: p.Flex<typeof IconRow>;
  cashIcon?: p.Flex<"svg">;
  totalConsumptionRow?: p.Flex<typeof IconRow>;
  cashIcon2?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  dueDateRow?: p.Flex<typeof IconRow>;
  dueDateIcon?: p.Flex<"svg">;
  downloadBillBtn?: p.Flex<typeof SecondaryButton>;
  veziFactura?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  hiddenCard?: p.Flex<typeof CardWall>;
  enterIdxBtn?: p.Flex<typeof Button>;
};

export interface DefaultHomepageProps {
  emittedDate?: React.ReactNode;
  totalPayment?: React.ReactNode;
  waterConsumption?: React.ReactNode;
  dueDate?: React.ReactNode;
  errorMessage?: React.ReactNode;
  existingBalance?: React.ReactNode;
  totalBill?: React.ReactNode;
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      {}

      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Page
          data-plasmic-name={"page"}
          data-plasmic-override={overrides.page}
          className={classNames("__wab_instance", sty.page)}
          cta={
            <React.Fragment>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rhsq)}
                  />
                ),

                value: args.errorMessage
              })}

              <CardWall
                data-plasmic-name={"hiddenCard"}
                data-plasmic-override={overrides.hiddenCard}
                bgHidden={true}
                cardContent={null}
                cardCta={
                  <Button
                    data-plasmic-name={"enterIdxBtn"}
                    data-plasmic-override={overrides.enterIdxBtn}
                    btnType={"primary" as const}
                    className={classNames("__wab_instance", sty.enterIdxBtn)}
                    shape={"rounded" as const}
                    showEndIcon={true}
                  >
                    {"Introducere Index"}
                  </Button>
                }
                cardType={"ctaOnly" as const}
                className={classNames("__wab_instance", sty.hiddenCard)}
              />
            </React.Fragment>
          }
          title={
            <Title
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames("__wab_instance", sty.title)}
              hasIcon={true}
            />
          }
        >
          <CardWall
            data-plasmic-name={"cardWall"}
            data-plasmic-override={overrides.cardWall}
            cardContent={
              <React.Fragment>
                <IconRow
                  data-plasmic-name={"issueDateRow"}
                  data-plasmic-override={overrides.issueDateRow}
                  className={classNames("__wab_instance", sty.issueDateRow)}
                  iconEntry={
                    <DatesvgIcon
                      data-plasmic-name={"calendarIcon"}
                      data-plasmic-override={overrides.calendarIcon}
                      className={classNames(projectcss.all, sty.calendarIcon)}
                      role={"img"}
                    />
                  }
                  staticText={"Data emitere: "}
                  visualVariations={["defaultColor"]}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "14.03.2022",
                    value: args.emittedDate
                  })}
                </IconRow>

                <IconRow
                  data-plasmic-name={"totalBillRow"}
                  data-plasmic-override={overrides.totalBillRow}
                  className={classNames("__wab_instance", sty.totalBillRow)}
                  iconEntry={
                    <BalanceIcon
                      data-plasmic-name={"cashIcon3"}
                      data-plasmic-override={overrides.cashIcon3}
                      className={classNames(projectcss.all, sty.cashIcon3)}
                      role={"img"}
                    />
                  }
                  staticText={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k1Wf3
                      )}
                    >
                      {"Sold: "}
                    </div>
                  }
                  visualVariations={["defaultColor"]}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "180 lei",
                    value: args.existingBalance
                  })}
                </IconRow>

                <IconRow
                  data-plasmic-name={"balanceRow"}
                  data-plasmic-override={overrides.balanceRow}
                  className={classNames("__wab_instance", sty.balanceRow)}
                  iconEntry={
                    <AbacusIcon
                      data-plasmic-name={"cashIcon4"}
                      data-plasmic-override={overrides.cashIcon4}
                      className={classNames(projectcss.all, sty.cashIcon4)}
                      role={"img"}
                    />
                  }
                  staticText={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yGrFm
                      )}
                    >
                      {"Total facturÄƒ: "}
                    </div>
                  }
                  visualVariations={["defaultColor"]}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "180 lei",
                    value: args.totalBill
                  })}
                </IconRow>

                <IconRow
                  data-plasmic-name={"paymentRow"}
                  data-plasmic-override={overrides.paymentRow}
                  className={classNames("__wab_instance", sty.paymentRow)}
                  iconEntry={
                    <CashsvgIcon
                      data-plasmic-name={"cashIcon"}
                      data-plasmic-override={overrides.cashIcon}
                      className={classNames(projectcss.all, sty.cashIcon)}
                      role={"img"}
                    />
                  }
                  staticText={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gIh4D
                      )}
                    >
                      {"Total de platÄƒ: "}
                    </div>
                  }
                  visualVariations={["defaultColor"]}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "160 lei",
                    value: args.totalPayment
                  })}
                </IconRow>

                <IconRow
                  data-plasmic-name={"totalConsumptionRow"}
                  data-plasmic-override={overrides.totalConsumptionRow}
                  className={classNames(
                    "__wab_instance",
                    sty.totalConsumptionRow
                  )}
                  iconEntry={
                    <MetersvgIcon
                      data-plasmic-name={"cashIcon2"}
                      data-plasmic-override={overrides.cashIcon2}
                      className={classNames(projectcss.all, sty.cashIcon2)}
                      role={"img"}
                    />
                  }
                  staticText={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ctuW
                      )}
                    >
                      {"Consum total: "}
                    </div>
                  }
                  visualVariations={["defaultColor"]}
                >
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "91 mÂ³",
                      value: args.waterConsumption
                    })}
                  </div>
                </IconRow>

                <IconRow
                  data-plasmic-name={"dueDateRow"}
                  data-plasmic-override={overrides.dueDateRow}
                  className={classNames("__wab_instance", sty.dueDateRow)}
                  iconEntry={
                    <CalendarChecksvgIcon
                      data-plasmic-name={"dueDateIcon"}
                      data-plasmic-override={overrides.dueDateIcon}
                      className={classNames(projectcss.all, sty.dueDateIcon)}
                      role={"img"}
                    />
                  }
                  staticText={"Data scadentÄƒ: "}
                  visualVariations={["defaultColor"]}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "29.03.2022",
                    value: args.dueDate
                  })}
                </IconRow>
              </React.Fragment>
            }
            cardCta={
              <SecondaryButton
                data-plasmic-name={"downloadBillBtn"}
                data-plasmic-override={overrides.downloadBillBtn}
                btnType={"secondary" as const}
                className={classNames("__wab_instance", sty.downloadBillBtn)}
                endIcon={
                  <DownloadsvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                }
                shape={"rounded" as const}
                showEndIcon={true}
              >
                <div
                  data-plasmic-name={"veziFactura"}
                  data-plasmic-override={overrides.veziFactura}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.veziFactura
                  )}
                >
                  {"Vezi factura"}
                </div>
              </SecondaryButton>
            }
            cardTitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sfLcu
                )}
              >
                {
                  "Ultima facturÄƒ  pentru consumul de apÄƒ a fost emisÄƒ de ApaNova."
                }
              </div>
            }
            className={classNames("__wab_instance", sty.cardWall)}
          />
        </Page>
      </p.Stack>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "page",
    "title",
    "cardWall",
    "issueDateRow",
    "calendarIcon",
    "totalBillRow",
    "cashIcon3",
    "balanceRow",
    "cashIcon4",
    "paymentRow",
    "cashIcon",
    "totalConsumptionRow",
    "cashIcon2",
    "freeBox",
    "dueDateRow",
    "dueDateIcon",
    "downloadBillBtn",
    "veziFactura",
    "svg",
    "hiddenCard",
    "enterIdxBtn"
  ],
  page: [
    "page",
    "title",
    "cardWall",
    "issueDateRow",
    "calendarIcon",
    "totalBillRow",
    "cashIcon3",
    "balanceRow",
    "cashIcon4",
    "paymentRow",
    "cashIcon",
    "totalConsumptionRow",
    "cashIcon2",
    "freeBox",
    "dueDateRow",
    "dueDateIcon",
    "downloadBillBtn",
    "veziFactura",
    "svg",
    "hiddenCard",
    "enterIdxBtn"
  ],
  title: ["title"],
  cardWall: [
    "cardWall",
    "issueDateRow",
    "calendarIcon",
    "totalBillRow",
    "cashIcon3",
    "balanceRow",
    "cashIcon4",
    "paymentRow",
    "cashIcon",
    "totalConsumptionRow",
    "cashIcon2",
    "freeBox",
    "dueDateRow",
    "dueDateIcon",
    "downloadBillBtn",
    "veziFactura",
    "svg"
  ],
  issueDateRow: ["issueDateRow", "calendarIcon"],
  calendarIcon: ["calendarIcon"],
  totalBillRow: ["totalBillRow", "cashIcon3"],
  cashIcon3: ["cashIcon3"],
  balanceRow: ["balanceRow", "cashIcon4"],
  cashIcon4: ["cashIcon4"],
  paymentRow: ["paymentRow", "cashIcon"],
  cashIcon: ["cashIcon"],
  totalConsumptionRow: ["totalConsumptionRow", "cashIcon2", "freeBox"],
  cashIcon2: ["cashIcon2"],
  freeBox: ["freeBox"],
  dueDateRow: ["dueDateRow", "dueDateIcon"],
  dueDateIcon: ["dueDateIcon"],
  downloadBillBtn: ["downloadBillBtn", "veziFactura", "svg"],
  veziFactura: ["veziFactura"],
  svg: ["svg"],
  hiddenCard: ["hiddenCard", "enterIdxBtn"],
  enterIdxBtn: ["enterIdxBtn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  page: typeof Page;
  title: typeof Title;
  cardWall: typeof CardWall;
  issueDateRow: typeof IconRow;
  calendarIcon: "svg";
  totalBillRow: typeof IconRow;
  cashIcon3: "svg";
  balanceRow: typeof IconRow;
  cashIcon4: "svg";
  paymentRow: typeof IconRow;
  cashIcon: "svg";
  totalConsumptionRow: typeof IconRow;
  cashIcon2: "svg";
  freeBox: "div";
  dueDateRow: typeof IconRow;
  dueDateIcon: "svg";
  downloadBillBtn: typeof SecondaryButton;
  veziFactura: "div";
  svg: "svg";
  hiddenCard: typeof CardWall;
  enterIdxBtn: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    page: makeNodeComponent("page"),
    title: makeNodeComponent("title"),
    cardWall: makeNodeComponent("cardWall"),
    issueDateRow: makeNodeComponent("issueDateRow"),
    calendarIcon: makeNodeComponent("calendarIcon"),
    totalBillRow: makeNodeComponent("totalBillRow"),
    cashIcon3: makeNodeComponent("cashIcon3"),
    balanceRow: makeNodeComponent("balanceRow"),
    cashIcon4: makeNodeComponent("cashIcon4"),
    paymentRow: makeNodeComponent("paymentRow"),
    cashIcon: makeNodeComponent("cashIcon"),
    totalConsumptionRow: makeNodeComponent("totalConsumptionRow"),
    cashIcon2: makeNodeComponent("cashIcon2"),
    freeBox: makeNodeComponent("freeBox"),
    dueDateRow: makeNodeComponent("dueDateRow"),
    dueDateIcon: makeNodeComponent("dueDateIcon"),
    downloadBillBtn: makeNodeComponent("downloadBillBtn"),
    veziFactura: makeNodeComponent("veziFactura"),
    svg: makeNodeComponent("svg"),
    hiddenCard: makeNodeComponent("hiddenCard"),
    enterIdxBtn: makeNodeComponent("enterIdxBtn"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
