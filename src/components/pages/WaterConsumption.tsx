// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicWaterConsumption,
  DefaultWaterConsumptionProps,
} from "../plasmic/apa_nova_app/PlasmicWaterConsumption";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { ROUTES, STYLING } from "../../utils/CONST";
import useAppNavigation from "../../hooks/useAppNavigation";
import { IndexInput } from "../proprietary/IndexInput";
import useDefaultQueries from "../../hooks/useDefaultQueries";
import SkeletonLoader, {
  SkeletonLoaderProps,
} from "../proprietary/skeletons/SkeletonLoader";
import { useAppCtx } from "../../contexts/AppCtxProvider";
import ConsumptionIndexCard from "../ConsumptionIndexCard";
import { makeButtonLoader, processHomepageErrs } from "./Homepage";
import useUpdateConsumption from "../../hooks/useUpdateConsumption";
import AppError from "../proprietary/AppError";
import apiErrToClientErr from "../../apiConsumer/apiErrToClientErr";

const { SKELETON_PRIMARY_COLOR } = STYLING;

export interface WaterConsumptionProps extends DefaultWaterConsumptionProps {}

function WaterConsumption_(
  props: WaterConsumptionProps,
  ref: HTMLElementRefOf<"div">
) {
  const { goBackTo } = useAppNavigation();
  const { userToken, appError, setAppError } = useAppCtx();
  const { consumption, user, latestBill } = useDefaultQueries(userToken);

  const { mutate, isLoading: isMutationInProgress } = useUpdateConsumption(
    latestBill.data?.billId,
    userToken
  );

  const { isError: isBillError, error: billError } = latestBill;
  const { isError: isUserError, error: userError } = user;
  const { isError: isConsumptionError, error: consumptionError } = consumption;
  React.useEffect(() => {
    if (isUserError || isBillError) {
      return processHomepageErrs(
        isBillError,
        isUserError,
        billError,
        userError,
        setAppError
      );
    }

    if (isConsumptionError) {
      setAppError(apiErrToClientErr(consumptionError));
    }
  }, [
    billError,
    consumptionError,
    isBillError,
    isConsumptionError,
    isUserError,
    setAppError,
    userError,
  ]);

  const isLoading =
    !consumption.isSuccess || !user.isSuccess || !latestBill.isSuccess;
  const buttonLoader = makeButtonLoader(isLoading);
  const componentLoader = (
    key: string,
    skeletonProps: SkeletonLoaderProps,
    children?: React.ReactNode
  ) => ({
    // @ts-expect-error
    render: (props, Component) =>
      isLoading ? (
        <SkeletonLoader key={`${key}-skeleton`} {...skeletonProps} />
      ) : (
        <Component
          key={`${key}-component`}
          {...props}
          children={children ? children : props.children}
        />
      ),
  });

  const { apartmentNo } = user.data || {};
  const {
    total,
    prevIndexWC,
    prevIndexBathroom,
    prevIndexKitchen,
    indexWC,
    indexBathroom,
    indexKitchen,
    consumptionCubeM,
    hasUpdated,
    consumptionPageId,
  } = consumption.data || {};
  const { total: totalBill, waterConsumption, billId } = latestBill.data || {};
  const pricePerCubeM = ((totalBill || 1) / (waterConsumption || 1)).toFixed(2);

  const [stateWC, setStateWC] = React.useState(indexWC);
  const [isValidWC, setIsValidWC] = React.useState(true);

  const [stateBathroom, setStateBathroom] = React.useState(indexBathroom);
  const [isValidBathroom, setIsValidBathroom] = React.useState(true);

  const [stateKitchen, setStateKitchen] = React.useState(indexKitchen);
  const [isValidKitchen, setIsValidKitchen] = React.useState(true);

  const valuesAreValid = isValidWC && isValidBathroom && isValidKitchen;

  React.useEffect(() => {
    if (indexWC !== undefined) {
      setStateWC(indexWC);
    }
    if (indexBathroom !== undefined) {
      setStateBathroom(indexBathroom);
    }
    if (indexKitchen !== undefined) {
      setStateKitchen(indexKitchen);
    }
  }, [indexWC, indexBathroom, indexKitchen]);

  const upateConsumption = () =>
    mutate({
      indexWC: stateWC!,
      indexBathroom: stateBathroom!,
      indexKitchen: stateKitchen!,

      userToken: userToken!,
      billId: billId!,
      // The notion page id
      consumptionPageId: consumptionPageId!,
    });

  const consumptionValues = [
    {
      name: "WC",
      oldIndex: prevIndexWC,

      state: stateWC,
      setState: setStateWC,

      isValid: isValidWC,
      setIsValid: setIsValidWC,
    },
    {
      name: "Baie",
      oldIndex: prevIndexBathroom,

      state: stateBathroom,
      setState: setStateBathroom,

      isValid: isValidBathroom,
      setIsValid: setIsValidBathroom,
    },
    {
      name: "Bucătărie",
      oldIndex: prevIndexKitchen,

      state: stateKitchen,
      setState: setStateKitchen,

      isValid: isValidKitchen,
      setIsValid: setIsValidKitchen,
    },
  ] as const;

  return (
    <PlasmicWaterConsumption
      root={{ ref }}
      {...props}
      backButton={{
        onClick() {
          goBackTo(ROUTES.HOMEPAGE);
        },
      }}
      consumptionIndexCard={{
        render: () =>
          consumptionValues.map(
            (
              { name, oldIndex, state, setState, isValid, setIsValid },
              elIdx
            ) => (
              <ConsumptionIndexCard
                key={`consumption-card-${elIdx}`}
                nth={elIdx}
                isLoading={isLoading}
                consumptionPlace={name}
                consumptionIndex={` ${oldIndex}`}
                digitsInput={
                  state !== undefined &&
                  oldIndex !== undefined && (
                    <IndexInput
                      key={`digitsInput-${elIdx}`}
                      currIndexVal={state}
                      setCurrIndexVal={
                        setState as React.Dispatch<React.SetStateAction<number>>
                      }
                      isValid={isValid}
                      setIsValid={setIsValid}
                      prevIndexVal={oldIndex}
                    />
                  )
                }
              />
            )
          ),
      }}
      title={componentLoader(
        "title",
        {
          containerStyle: {
            width: "50vw",
          },
          height: "var(--plasmic-token-title)",

          ...SKELETON_PRIMARY_COLOR,
        },
        <div>{`Apartament ${apartmentNo}`}</div>
      )}
      errorMessage={<AppError>{appError}</AppError>}
      enterIdxBtn={buttonLoader(
        () => {
          if (!valuesAreValid) {
            return;
          }

          upateConsumption();
        },
        {},
        SKELETON_PRIMARY_COLOR,
        {
          isLoading: isMutationInProgress,
          isDisabled: !valuesAreValid,
        }
      )}
      totalText={`${(total || 0).toFixed(2)} LEI`}
      waterConsumption={`${consumptionCubeM || 0} m³`}
      priceBreakdown={`${pricePerCubeM} lei / m³ = ${totalBill} lei / ${waterConsumption} m³`}
      totalBreakdown={{
        render: (props, Component) =>
          !isLoading && hasUpdated && <Component {...props} />,
      }}
    />
  );
}

const WaterConsumption = React.forwardRef(WaterConsumption_);
export default WaterConsumption;
