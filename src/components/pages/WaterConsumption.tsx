// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicWaterConsumption,
  DefaultWaterConsumptionProps,
} from "../plasmic/apa_nova_app/PlasmicWaterConsumption";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { ROUTES, STYLING } from "../../utils/CONST";
import useAppNavigation from "../../hooks/useAppNavigation";
import { IndexInput } from "../proprietary/IndexInput";
import useDefaultQueries from "../../hooks/useDefaultQueries";
import SkeletonLoader, {
  SkeletonLoaderProps,
} from "../proprietary/skeletons/SkeletonLoader";
import { useAppCtx } from "../../contexts/AppCtxProvider";
import ConsumptionIndexCard from "../ConsumptionIndexCard";
import { makeButtonLoader } from "./Homepage";

const { SKELETON_PRIMARY_COLOR } = STYLING;

export interface WaterConsumptionProps extends DefaultWaterConsumptionProps {}

function WaterConsumption_(
  props: WaterConsumptionProps,
  ref: HTMLElementRefOf<"div">
) {
  const { goBackTo } = useAppNavigation();
  const { userToken } = useAppCtx();
  const { consumption, user, latestBill } = useDefaultQueries(userToken);

  const isLoading = !consumption.isSuccess || !user.isSuccess;
  const buttonLoader = makeButtonLoader(isLoading);
  const componentLoader = (
    key: string,
    skeletonProps: SkeletonLoaderProps,
    children?: React.ReactNode
  ) => ({
    // @ts-expect-error
    render: (props, Component) =>
      isLoading ? (
        <SkeletonLoader key={`${key}-skeleton`} {...skeletonProps} />
      ) : (
        <Component
          key={`${key}-component`}
          {...props}
          children={children ? children : props.children}
        />
      ),
  });

  const { apartmentNo } = user.data || {};
  const {
    total,
    prevIndexWC,
    prevIndexBathroom,
    prevIndexKitchen,
    indexWC,
    indexBathroom,
    indexKitchen,
  } = consumption.data || {};
  const { total: totalBill, waterConsumption } = latestBill.data || {};
  const pricePerCubeM = ((totalBill || 1) / (waterConsumption || 1)).toFixed(2);

  // TODO: Add state for each IndexInput

  const consumptionValues = [
    {
      name: "WC",
      oldIndex: prevIndexWC,
    },
    {
      name: "Baie",
      oldIndex: prevIndexBathroom,
    },
    {
      name: "Bucătărie",
      oldIndex: prevIndexKitchen,
    },
  ] as const;

  return (
    <PlasmicWaterConsumption
      root={{ ref }}
      {...props}
      backButton={{
        onClick() {
          goBackTo(ROUTES.HOMEPAGE);
        },
      }}
      consumptionIndexCard={{
        render: () =>
          consumptionValues.map(({ name, oldIndex }, elIdx) => (
            <ConsumptionIndexCard
              key={`consumption-card-${elIdx}`}
              isLoading={isLoading}
              consumptionPlace={name}
              consumptionIndex={` ${oldIndex}`}
              digitsInput={<IndexInput key={`digitsInput-${elIdx}`} />}
            />
          )),
      }}
      title={componentLoader(
        "title",
        {
          containerStyle: {
            width: "50vw",
          },
          height: "var(--plasmic-token-title)",

          ...SKELETON_PRIMARY_COLOR,
        },
        <div>{`Apartament ${apartmentNo}`}</div>
      )}
      enterIdxBtn={buttonLoader(
        () => {
          console.log("SABING");
        },
        {},
        SKELETON_PRIMARY_COLOR
      )}
      totalText={`${total} LEI`}
      waterConsumption={"2000 m³"}
      priceBreakdown={`${pricePerCubeM} lei / m³ = ${totalBill} lei / ${waterConsumption} m³`}
      totalBreakdown={{
        // TODO: Smarter hiding of the total breakdown
        render: (props, Component) => !isLoading && <Component {...props} />,
      }}
    />
  );
}

const WaterConsumption = React.forwardRef(WaterConsumption_);
export default WaterConsumption;
