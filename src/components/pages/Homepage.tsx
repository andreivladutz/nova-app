// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicHomepage,
  DefaultHomepageProps,
} from "../plasmic/apa_nova_app/PlasmicHomepage";
import { HTMLElementRefOf } from "@plasmicapp/react-web";

import useAppNavigation from "../../hooks/useAppNavigation";
import useDefaultQueries from "../../hooks/useDefaultQueries";
import { useAppCtx } from "../../contexts/AppCtxProvider";

import downloadFile from "../../utils/downloadFile";
import { CLIENT_ERR_CODES, ROUTES, STYLING, UnitType } from "../../utils/CONST";
import ButtonSkeleton from "../proprietary/skeletons/ButtonSkeleton";
import SkeletonLoader, {
  SkeletonLoaderProps,
} from "../proprietary/skeletons/SkeletonLoader";
import { ButtonProps } from "../Button";
import AppError from "../proprietary/AppError";
import apiErrToClientErr from "../../apiConsumer/apiErrToClientErr";
import { HttpClientError } from "../../apiConsumer/client";
import { formatMetric } from "../../utils/format";

const { SKELETON_PRIMARY_COLOR } = STYLING;
const { MISSING_USER_TOKEN, INVALID_USER_TOKEN } = CLIENT_ERR_CODES;

export const makeButtonLoader =
  (isLoading: boolean) =>
  (
    onClick: () => void,
    skeletonContainerStyle?: React.CSSProperties,
    skeletonProps?: SkeletonLoaderProps,
    extraButtonProps?: ButtonProps
  ) => ({
    // @ts-expect-error
    render: (props, Component) =>
      isLoading ? (
        <div style={{ width: "100%", ...skeletonContainerStyle }}>
          <ButtonSkeleton {...skeletonProps} />
        </div>
      ) : (
        <Component {...props} {...extraButtonProps} onClick={onClick} />
      ),
  });

export const processHomepageErrs = (
  isBillError: boolean,
  isUserError: boolean,
  billError: HttpClientError | null,
  userError: HttpClientError | null,
  setAppError: React.Dispatch<React.SetStateAction<CLIENT_ERR_CODES | null>>
) => {
  if (isBillError) {
    return setAppError(apiErrToClientErr(billError));
  }

  if (isUserError) {
    return setAppError(apiErrToClientErr(userError));
  }
};

export interface HomepageProps extends DefaultHomepageProps {}

function Homepage_(props: HomepageProps, ref: HTMLElementRefOf<"div">) {
  const { navigate } = useAppNavigation();
  const { userToken, appError, setAppError } = useAppCtx();
  const {
    user: { isError: isUserError, error: userError },
    latestBill: { data, isSuccess, isError: isBillError, error: billError },
  } = useDefaultQueries(userToken);

  React.useEffect(
    () =>
      processHomepageErrs(
        isBillError,
        isUserError,
        billError,
        userError,
        setAppError
      ),
    [billError, isBillError, isUserError, setAppError, userError]
  );

  const isLoading = !isSuccess;

  const conditionedRender = (flag: boolean, trueFlagNode: React.ReactNode) => ({
    // @ts-expect-error
    render: (props, Component) =>
      flag ? trueFlagNode : <Component {...props} />,
  });

  const componentLoader = conditionedRender(
    isLoading,
    <SkeletonLoader style={{ marginBottom: "0.25rem" }} />
  );

  const componentHideIf = (condition: boolean) =>
    conditionedRender(condition, null);

  const buttonLoader = makeButtonLoader(isLoading);

  return (
    <PlasmicHomepage
      root={{ ref }}
      {...props}
      /* Fill in data slots */
      emittedDate={data?.dateEmitted}
      existingBalance={formatMetric(-20, UnitType.Ron)}
      totalBill={formatMetric(200, UnitType.Ron)}
      totalPayment={formatMetric(data?.total, UnitType.Ron)}
      waterConsumption={formatMetric(data?.waterConsumption, UnitType.CubeM)}
      dueDate={data?.dueDate}
      /* The IconRow components containing the data slots */
      issueDateRow={componentLoader}
      balanceRow={componentHideIf(true)}
      totalBillRow={componentHideIf(true)}
      paymentRow={componentLoader}
      totalConsumptionRow={componentLoader}
      dueDateRow={componentLoader}
      downloadBillBtn={buttonLoader(() =>
        downloadFile(data!.file, "factura-apanova")
      )}
      errorMessage={<AppError>{appError}</AppError>}
      enterIdxBtn={buttonLoader(
        () => navigate(ROUTES.WATER_CONSUMPTION),
        {
          marginTop: "-2rem",
        },
        SKELETON_PRIMARY_COLOR,
        {
          isDisabled:
            isBillError ||
            isUserError ||
            [MISSING_USER_TOKEN, INVALID_USER_TOKEN].includes(appError!),
        }
      )}
    />
  );
}

const Homepage = React.forwardRef(Homepage_);
export default Homepage;
